{
  "hash": "43fa5fcad0ee05bda8d3e3080dcca659",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"The callback pattern\"\nauthor: \"Akshay Shankar\"\ndate: \"2025-01-27\"\ncategories: [chunk, code]\nimage: \"julia.png\"\n---\n\nOne of my favourite design patterns is the `Callback` (also known as the [`Command`](https://gameprogrammingpatterns.com/command.html\n) pattern in object-oriented contexts). Loosely speaking, a callback is simply a function `f` whose reference has been passed on to another function `g` which then proceeds to invoke `f` upon completion at a later time. It is trivially usable in languages that implement functions as first-class citizens (where they may be passed around as arguments with no hassle). While the idea is quite simple, it can lend itself to some very powerful and intuitive user interfaces! I've had natural use-cases arise both during my day-to-day research as well as during game development.\n\nLet us consider a simple and perhaps a bit over-engineered example using Julia to demonstrate this idea. Say we want to write a generic interface for a differential equation solver. (Note that much of what I present here is simply a poor man's version of the equivalent implementation in the behemoth that is [DifferentialEquations.jl](https://docs.sciml.ai/DiffEqDocs/stable/).)\n\n# A generic integrator interface\n[RK4](https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods) seems like a good place to start. We begin by defining a struct to hold the state of the integrator, `(u, tspan)`, where `u` can be anything that implements `similar` and supports basic algebraic operations and broadcasting, and `tspan` is an `AbstractRange` specifying the time interval of problem. The remaining variables are dummies to avoid allocation in a [hot loop](https://en.wikipedia.org/wiki/Hot_spot_(computer_programming)).\n\n\n\n::: {#0dc86747 .cell execution_count=2}\n``` {.julia .cell-code}\nabstract type AbstractIntegrator end\n\nstruct RK4Integrator{T,S} <: AbstractIntegrator\n    # current solver state\n    u::T\n    tspan::S\n\n    # intermediate variables\n    k1::T\n    k2::T\n    k3::T\n    k4::T\n    tmp::T\n\n    RK4Integrator(u, tspan) = new{typeof(u),typeof(tspan)}(\n        u, tspan, similar(u), similar(u), similar(u), similar(u), similar(u)\n    )\nend\n```\n:::\n\n\nEvery integrator is expected to implement a `step!` method that expects a function `f!` implementing the in-place derivative, and performs the actual time-stepping.\n\n::: {#2e12814b .cell execution_count=3}\n``` {.julia .cell-code}\nfunction step!(integrator::RK4Integrator, f!, t)\n    (; u, tspan, k1, k2, k3, k4, tmp) = integrator\n    dt = step(tspan)\n\n    f!(k1, u, t)\n\n    @. tmp = u + dt / 2 * k1\n    f!(k2, tmp, t + dt / 2)\n\n    @. tmp = u + dt / 2 * k2\n    f!(k3, tmp, t + dt / 2)\n\n    @. tmp = u + dt * k3\n    f!(k4, tmp, t + dt)\n\n    @. u += dt / 6 * (k1 + 2 * k2 + 2 * k3 + k4)\n    return u\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nstep! (generic function with 1 method)\n```\n:::\n:::\n\n\nThen, we require only one generic function that actually loops through the time-steps. Below we just implement a basic version, but there is nothing stopping us from being more sophisticated with adaptive algorithms as well.\n\n::: {#3a2656e7 .cell execution_count=4}\n``` {.julia .cell-code}\nfunction solve!(f!, u0, tspan; solver, (callback!)=(iter, integrator) -> nothing)\n    integrator = solver(u0, tspan)\n\n    for iter in eachindex(tspan)\n        step!(integrator, f!, tspan[iter])\n        callback!(iter, integrator)\n    end\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nsolve! (generic function with 1 method)\n```\n:::\n:::\n\n\nAt this point, we introduce the notion of a callback as a mutating function that takes the input `(iter, integrator)::(Integer, AbstractIntegrator)` and is invoked at the end of every iteration. We will soon see that the callback can be utilized by the user to run custom logic within the integrator loop without ever having to touch the actual internals. In the meanwhile, we can now solve any ordinary differential equation with the RK4 method!\n\n::: {#8eee7e1a .cell execution_count=5}\n``` {.julia .cell-code}\n    function dfdt!(du, u, t)\n        du[1] = -5. * u[1]\n    end\n\n\tsolve!(dfdt!, [5.], range(0., 1., length=100), solver = RK4Integrator)\n```\n:::\n\n\nNote that this function only provides access to the value of `u` at the last time-step, which is a bit weird since typically we would want the evolution of the state as a time-series. While this was an artifical oversight on my part, it also provides a good opportunity to utilize callbacks to store custom data during the solver steps.\n\n# The callback struct\nGenerally, custom logic can be stateful (i.e, have persistent local variables) and one would need to create a [closure](https://en.wikipedia.org/wiki/Closure_(computer_programming)) over the function that actually performs the mutating action on the state of the integrator. However, Julia offers another alternative; namely, we can define a struct that encapsulates the data, which can then be [invoked as a function](https://docs.julialang.org/en/v1/manual/methods/#Function-like-objects) with access to this data. Since both structs and functions may be invoked by means of a function call syntax, I will generically refer to them as `callables` henceforth.\n\nIn order to define a generic interface, we first need to think about what the general use-case of callbacks would be. In the context of an integrator, we expect that callbacks will have the specific form of evaluating whether a certain `condition` is met at the time of invocation, and if so, it performs a certain `effect` that mutates the state of the integrator. For example, we may want to save a certain variable every 10 iterations, or normalize the state whenever it deviates beyond a certain threshold, etc. So, we define a `Callback` struct as a collection of two callables; (1) `condition` with signature `(iter, integrator) -> bool` and (2) `effect` with signature `(iter, integrator) -> integrator`, although it is intended to be mutating.\n\n::: {#690e3243 .cell execution_count=6}\n``` {.julia .cell-code}\nbegin\n\tstruct Callback{C,E}\n\t    \"condition for performing callback: (iter, integrator) -> bool\"\n\t    condition::C\n\t    \"callback function acting on solver state: (iter, integrator) -> integrator\"\n\t    effect::E\n\tend\n\t\n\tcondition(p::Callback) = p.condition\n\teffect(p::Callback) = p.effect\n\t\n\tfunction (p::Callback)(iter, integrator)\n\t    if condition(p)(iter, integrator)\n\t        effect(p)(iter, integrator)\n\t    end\n\t\n\t    return integrator\n\tend\nend\n```\n:::\n\n\nWe can further define a `CallbackList` that sequentially invokes its elements if we have more than one callback.\n\n::: {#473f91df .cell execution_count=7}\n``` {.julia .cell-code}\nbegin\n    struct CallbackList\n        callbacks::Vector{Callback}\n    end\n\n    function (p::CallbackList)(iter, integrator)\n        for callback in p.callbacks\n            callback(iter, integrator)\n        end\n\n        return integrator\n    end\n\n    Base.getindex(p::CallbackList, idx) = getindex(p.callbacks, idx)\n    Base.length(p::CallbackList) = length(p.callbacks)\nend\n```\n:::\n\n\nNow that the basic structure is in place, let us implement some common `condition`s. Again, these don't _have_ to be structs, but since the specific use-cases here require statefulness, they are an appropriate choice. Note that we have not placed explicit safegaurds to statically check whether the function call has the right signature, so the program would fail at run-time if the signature does not match what is expected.\n\n::: {#9e008a9a .cell execution_count=8}\n``` {.julia .cell-code}\nbegin\n    # trigger every n iterations\n    mutable struct OnIterElapsed\n        \"number of iterations between trigger\"\n        save_freq::Int\n\n        loop::Bool # if true, continuously fires, otherwise it is a one-shot condition\n        flag::Bool # true if condition has been fired once\n\n        OnIterElapsed(save_freq, loop=true) = new(save_freq, loop, false)\n    end\n\n    function (p::OnIterElapsed)(iter, integrator)\n        res = iszero(iter % p.save_freq)\n        return p.loop ? res : (!p.flag ? (p.flag = res; p.flag) : false)\n    end\n\n    # maybe for saving data to file as a backup during long program runs\n    mutable struct OnRealTimeElapsed\n        \"starting time in seconds\"\n        start_tick::Float64\n        \"number of seconds between trigger\"\n        save_freq::Float64\n\n        # :s - second, :m - minute, :h - hour\n        function OnRealTimeElapsed(freq, unit=:m)\n            if unit == :m\n                freq *= 60\n            elseif unit == :h\n                freq *= 3600\n            elseif unit != :s\n                throw(ArgumentError(\"invalid unit `:$unit`, expected `:s`, `:m` or `:h`\"))\n            end\n\n            new(time(), freq)\n        end\n    end\n\n    # only gets called AFTER an iteration is complete!\n    (p::OnRealTimeElapsed)(iter, state, H, envs) = ((time() - p.start_tick) > p.save_freq) ? (p.start_tick = time(); true) : false\nend\n```\n:::\n\n\nWe now define a generic `effect` that simply computes some specified observables using the integrator state. We do so by defining a struct `RecordObservable` which expects an input `recipe` which is a named tuple of pairs like (`name`, `function to compute observable`). For example; `(norm = (iter, integrator) -> norm(integrator.u), iter = (iter, integrator) -> iter)`. It then stores the result in `data` whenever the `condition` of its parent `Callback` returns `true`. While this is a trivial example, it may be quite useful if there is some internal integrator state (which is not simply the solution `u`) that must be tracked.\n\n::: {#607a512c .cell execution_count=9}\n``` {.julia .cell-code}\nbegin\n    struct RecordObservable{D,O}\n        \"collection of string-array pairs containing observable data\"\n        data::D\n        \"functions to compute observable data\"\n        observables::O\n\n        function RecordObservable(recipe)\n            names = keys(recipe)\n            observables = values(recipe)\n            data = NamedTuple{names}(([] for _ in eachindex(names)))\n            return new{typeof(data),typeof(observables)}(data, observables)\n        end\n    end\n\n    # to access the data without an extra .data; bit iffy, but functional\n    function Base.getproperty(p::RecordObservable, key::Symbol)\n        if key in fieldnames(typeof(p))\n            return getfield(p, key)\n        else\n            return getproperty(p.data, key)\n        end\n    end\n\n    Base.length(p::RecordObservable) = length(p.data)\n\n    function (p::RecordObservable)(iter, integrator)\n        for i in 1:length(p)\n            push!(p.data[i], p.observables[i](iter, integrator))\n        end\n\n        return integrator\n    end\nend\n```\n:::\n\n\nWe can now finally record the solution as a time-series at every iteration and visualize it. (Note that it is strictly necessary to wrap the keyword argument `callback!` in parenthesis because there is an ambiguity in syntax due to a possible `!=` otherwise.)\n\n::: {#46eae6f8 .cell execution_count=10}\n``` {.julia .cell-code}\nlet\n    record_state = Callback(\n        OnIterElapsed(1),\n        RecordObservable((u=(iter, integrator) -> copy(integrator.u),))\n    )\n    solve!(dfdt!, [5.0], range(0.0, 1.0, length=100), solver=RK4Integrator, (callback!)=record_state)\n    plot(first.(record_state.effect.u))\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"672\" height=\"480\" viewBox=\"0 0 2688 1920\">\n<defs>\n  <clipPath id=\"clip150\">\n    <rect x=\"0\" y=\"0\" width=\"2688\" height=\"1920\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip150)\" d=\"M0 1920 L2688 1920 L2688 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip151\">\n    <rect x=\"537\" y=\"0\" width=\"1883\" height=\"1883\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip150)\" d=\"M115.057 1800.78 L2640.76 1800.78 L2640.76 47.2441 L115.057 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip152\">\n    <rect x=\"115\" y=\"47\" width=\"2527\" height=\"1755\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"162.471,1800.78 162.471,47.2441 \"/>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"764.172,1800.78 764.172,47.2441 \"/>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1365.87,1800.78 1365.87,47.2441 \"/>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1967.57,1800.78 1967.57,47.2441 \"/>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2569.27,1800.78 2569.27,47.2441 \"/>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"115.057,1762.37 2640.76,1762.37 \"/>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"115.057,1412.02 2640.76,1412.02 \"/>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"115.057,1061.66 2640.76,1061.66 \"/>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"115.057,711.307 2640.76,711.307 \"/>\n<polyline clip-path=\"url(#clip152)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"115.057,360.951 2640.76,360.951 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"115.057,1800.78 2640.76,1800.78 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"162.471,1800.78 162.471,1781.88 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"764.172,1800.78 764.172,1781.88 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1365.87,1800.78 1365.87,1781.88 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1967.57,1800.78 1967.57,1781.88 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2569.27,1800.78 2569.27,1781.88 \"/>\n<path clip-path=\"url(#clip150)\" d=\"M162.471 1834 Q158.86 1834 157.031 1837.57 Q155.226 1841.11 155.226 1848.24 Q155.226 1855.34 157.031 1858.91 Q158.86 1862.45 162.471 1862.45 Q166.105 1862.45 167.911 1858.91 Q169.74 1855.34 169.74 1848.24 Q169.74 1841.11 167.911 1837.57 Q166.105 1834 162.471 1834 M162.471 1830.3 Q168.281 1830.3 171.337 1834.9 Q174.416 1839.49 174.416 1848.24 Q174.416 1856.96 171.337 1861.57 Q168.281 1866.15 162.471 1866.15 Q156.661 1866.15 153.582 1861.57 Q150.527 1856.96 150.527 1848.24 Q150.527 1839.49 153.582 1834.9 Q156.661 1830.3 162.471 1830.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M743.443 1861.55 L759.762 1861.55 L759.762 1865.48 L737.818 1865.48 L737.818 1861.55 Q740.48 1858.79 745.063 1854.16 Q749.67 1849.51 750.85 1848.17 Q753.096 1845.65 753.975 1843.91 Q754.878 1842.15 754.878 1840.46 Q754.878 1837.71 752.933 1835.97 Q751.012 1834.23 747.91 1834.23 Q745.711 1834.23 743.258 1835 Q740.827 1835.76 738.049 1837.31 L738.049 1832.59 Q740.873 1831.46 743.327 1830.88 Q745.781 1830.3 747.818 1830.3 Q753.188 1830.3 756.383 1832.98 Q759.577 1835.67 759.577 1840.16 Q759.577 1842.29 758.767 1844.21 Q757.98 1846.11 755.873 1848.7 Q755.295 1849.37 752.193 1852.59 Q749.091 1855.78 743.443 1861.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M769.623 1830.92 L787.98 1830.92 L787.98 1834.86 L773.906 1834.86 L773.906 1843.33 Q774.924 1842.98 775.943 1842.82 Q776.961 1842.64 777.98 1842.64 Q783.767 1842.64 787.146 1845.81 Q790.526 1848.98 790.526 1854.4 Q790.526 1859.97 787.054 1863.08 Q783.581 1866.15 777.262 1866.15 Q775.086 1866.15 772.818 1865.78 Q770.572 1865.41 768.165 1864.67 L768.165 1859.97 Q770.248 1861.11 772.47 1861.66 Q774.693 1862.22 777.169 1862.22 Q781.174 1862.22 783.512 1860.11 Q785.85 1858.01 785.85 1854.4 Q785.85 1850.78 783.512 1848.68 Q781.174 1846.57 777.169 1846.57 Q775.294 1846.57 773.419 1846.99 Q771.568 1847.4 769.623 1848.28 L769.623 1830.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1340.57 1830.92 L1358.93 1830.92 L1358.93 1834.86 L1344.85 1834.86 L1344.85 1843.33 Q1345.87 1842.98 1346.89 1842.82 Q1347.91 1842.64 1348.93 1842.64 Q1354.72 1842.64 1358.09 1845.81 Q1361.47 1848.98 1361.47 1854.4 Q1361.47 1859.97 1358 1863.08 Q1354.53 1866.15 1348.21 1866.15 Q1346.03 1866.15 1343.77 1865.78 Q1341.52 1865.41 1339.11 1864.67 L1339.11 1859.97 Q1341.2 1861.11 1343.42 1861.66 Q1345.64 1862.22 1348.12 1862.22 Q1352.12 1862.22 1354.46 1860.11 Q1356.8 1858.01 1356.8 1854.4 Q1356.8 1850.78 1354.46 1848.68 Q1352.12 1846.57 1348.12 1846.57 Q1346.24 1846.57 1344.37 1846.99 Q1342.52 1847.4 1340.57 1848.28 L1340.57 1830.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1380.69 1834 Q1377.08 1834 1375.25 1837.57 Q1373.44 1841.11 1373.44 1848.24 Q1373.44 1855.34 1375.25 1858.91 Q1377.08 1862.45 1380.69 1862.45 Q1384.32 1862.45 1386.13 1858.91 Q1387.96 1855.34 1387.96 1848.24 Q1387.96 1841.11 1386.13 1837.57 Q1384.32 1834 1380.69 1834 M1380.69 1830.3 Q1386.5 1830.3 1389.55 1834.9 Q1392.63 1839.49 1392.63 1848.24 Q1392.63 1856.96 1389.55 1861.57 Q1386.5 1866.15 1380.69 1866.15 Q1374.88 1866.15 1371.8 1861.57 Q1368.74 1856.96 1368.74 1848.24 Q1368.74 1839.49 1371.8 1834.9 Q1374.88 1830.3 1380.69 1830.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1941.43 1830.92 L1963.65 1830.92 L1963.65 1832.91 L1951.1 1865.48 L1946.22 1865.48 L1958.02 1834.86 L1941.43 1834.86 L1941.43 1830.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M1972.82 1830.92 L1991.17 1830.92 L1991.17 1834.86 L1977.1 1834.86 L1977.1 1843.33 Q1978.12 1842.98 1979.14 1842.82 Q1980.15 1842.64 1981.17 1842.64 Q1986.96 1842.64 1990.34 1845.81 Q1993.72 1848.98 1993.72 1854.4 Q1993.72 1859.97 1990.25 1863.08 Q1986.77 1866.15 1980.46 1866.15 Q1978.28 1866.15 1976.01 1865.78 Q1973.77 1865.41 1971.36 1864.67 L1971.36 1859.97 Q1973.44 1861.11 1975.66 1861.66 Q1977.89 1862.22 1980.36 1862.22 Q1984.37 1862.22 1986.71 1860.11 Q1989.04 1858.01 1989.04 1854.4 Q1989.04 1850.78 1986.71 1848.68 Q1984.37 1846.57 1980.36 1846.57 Q1978.49 1846.57 1976.61 1846.99 Q1974.76 1847.4 1972.82 1848.28 L1972.82 1830.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M2528.88 1861.55 L2536.52 1861.55 L2536.52 1835.18 L2528.21 1836.85 L2528.21 1832.59 L2536.47 1830.92 L2541.15 1830.92 L2541.15 1861.55 L2548.79 1861.55 L2548.79 1865.48 L2528.88 1865.48 L2528.88 1861.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M2568.23 1834 Q2564.62 1834 2562.79 1837.57 Q2560.99 1841.11 2560.99 1848.24 Q2560.99 1855.34 2562.79 1858.91 Q2564.62 1862.45 2568.23 1862.45 Q2571.87 1862.45 2573.67 1858.91 Q2575.5 1855.34 2575.5 1848.24 Q2575.5 1841.11 2573.67 1837.57 Q2571.87 1834 2568.23 1834 M2568.23 1830.3 Q2574.04 1830.3 2577.1 1834.9 Q2580.18 1839.49 2580.18 1848.24 Q2580.18 1856.96 2577.1 1861.57 Q2574.04 1866.15 2568.23 1866.15 Q2562.42 1866.15 2559.34 1861.57 Q2556.29 1856.96 2556.29 1848.24 Q2556.29 1839.49 2559.34 1834.9 Q2562.42 1830.3 2568.23 1830.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M2598.39 1834 Q2594.78 1834 2592.95 1837.57 Q2591.15 1841.11 2591.15 1848.24 Q2591.15 1855.34 2592.95 1858.91 Q2594.78 1862.45 2598.39 1862.45 Q2602.03 1862.45 2603.83 1858.91 Q2605.66 1855.34 2605.66 1848.24 Q2605.66 1841.11 2603.83 1837.57 Q2602.03 1834 2598.39 1834 M2598.39 1830.3 Q2604.2 1830.3 2607.26 1834.9 Q2610.34 1839.49 2610.34 1848.24 Q2610.34 1856.96 2607.26 1861.57 Q2604.2 1866.15 2598.39 1866.15 Q2592.58 1866.15 2589.51 1861.57 Q2586.45 1856.96 2586.45 1848.24 Q2586.45 1839.49 2589.51 1834.9 Q2592.58 1830.3 2598.39 1830.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"115.057,1800.78 115.057,47.2441 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"115.057,1762.37 133.955,1762.37 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"115.057,1412.02 133.955,1412.02 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"115.057,1061.66 133.955,1061.66 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"115.057,711.307 133.955,711.307 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"115.057,360.951 133.955,360.951 \"/>\n<path clip-path=\"url(#clip150)\" d=\"M62.7928 1748.17 Q59.1817 1748.17 57.353 1751.74 Q55.5475 1755.28 55.5475 1762.41 Q55.5475 1769.51 57.353 1773.08 Q59.1817 1776.62 62.7928 1776.62 Q66.427 1776.62 68.2326 1773.08 Q70.0613 1769.51 70.0613 1762.41 Q70.0613 1755.28 68.2326 1751.74 Q66.427 1748.17 62.7928 1748.17 M62.7928 1744.47 Q68.6029 1744.47 71.6585 1749.07 Q74.7372 1753.66 74.7372 1762.41 Q74.7372 1771.13 71.6585 1775.74 Q68.6029 1780.32 62.7928 1780.32 Q56.9826 1780.32 53.904 1775.74 Q50.8484 1771.13 50.8484 1762.41 Q50.8484 1753.66 53.904 1749.07 Q56.9826 1744.47 62.7928 1744.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M54.8299 1425.36 L62.4687 1425.36 L62.4687 1399 L54.1586 1400.66 L54.1586 1396.4 L62.4224 1394.74 L67.0983 1394.74 L67.0983 1425.36 L74.7372 1425.36 L74.7372 1429.3 L54.8299 1429.3 L54.8299 1425.36 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M58.4178 1075.01 L74.7372 1075.01 L74.7372 1078.94 L52.7928 1078.94 L52.7928 1075.01 Q55.4549 1072.25 60.0382 1067.62 Q64.6446 1062.97 65.8252 1061.63 Q68.0705 1059.1 68.9502 1057.37 Q69.8529 1055.61 69.8529 1053.92 Q69.8529 1051.16 67.9085 1049.43 Q65.9872 1047.69 62.8854 1047.69 Q60.6863 1047.69 58.2326 1048.46 Q55.8021 1049.22 53.0243 1050.77 L53.0243 1046.05 Q55.8484 1044.91 58.3021 1044.34 Q60.7558 1043.76 62.7928 1043.76 Q68.1631 1043.76 71.3576 1046.44 Q74.552 1049.13 74.552 1053.62 Q74.552 1055.75 73.7418 1057.67 Q72.9548 1059.57 70.8483 1062.16 Q70.2696 1062.83 67.1678 1066.05 Q64.0659 1069.24 58.4178 1075.01 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M67.6076 709.953 Q70.964 710.67 72.839 712.939 Q74.7372 715.207 74.7372 718.541 Q74.7372 723.656 71.2187 726.457 Q67.7002 729.258 61.2187 729.258 Q59.0428 729.258 56.728 728.818 Q54.4364 728.402 51.9827 727.545 L51.9827 723.031 Q53.9271 724.165 56.2419 724.744 Q58.5567 725.323 61.0798 725.323 Q65.478 725.323 67.7696 723.587 Q70.0844 721.851 70.0844 718.541 Q70.0844 715.485 67.9317 713.772 Q65.802 712.036 61.9826 712.036 L57.9549 712.036 L57.9549 708.193 L62.1678 708.193 Q65.6169 708.193 67.4455 706.828 Q69.2742 705.439 69.2742 702.846 Q69.2742 700.184 67.3761 698.772 Q65.5011 697.337 61.9826 697.337 Q60.0613 697.337 57.8623 697.754 Q55.6632 698.17 53.0243 699.05 L53.0243 694.883 Q55.6864 694.142 58.0012 693.772 Q60.3391 693.402 62.3993 693.402 Q67.7233 693.402 70.8252 695.832 Q73.927 698.24 73.927 702.36 Q73.927 705.23 72.2835 707.221 Q70.64 709.189 67.6076 709.953 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M65.1539 347.745 L53.3484 366.194 L65.1539 366.194 L65.1539 347.745 M63.927 343.671 L69.8066 343.671 L69.8066 366.194 L74.7372 366.194 L74.7372 370.083 L69.8066 370.083 L69.8066 378.231 L65.1539 378.231 L65.1539 370.083 L49.5521 370.083 L49.5521 365.569 L63.927 343.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip152)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"186.539,96.8724 210.607,178.9 234.675,256.887 258.743,331.034 282.811,401.528 306.879,468.551 330.947,532.273 355.015,592.857 379.083,650.456 403.151,705.219 427.219,757.285 451.288,806.786 475.356,853.85 499.424,898.595 523.492,941.137 547.56,981.584 571.628,1020.04 595.696,1056.6 619.764,1091.36 643.832,1124.41 667.9,1155.83 691.968,1185.7 716.036,1214.1 740.104,1241.1 764.172,1266.78 788.24,1291.19 812.308,1314.39 836.376,1336.46 860.444,1357.43 884.512,1377.38 908.58,1396.34 932.648,1414.37 956.716,1431.51 980.784,1447.8 1004.85,1463.29 1028.92,1478.02 1052.99,1492.03 1077.06,1505.34 1101.12,1518 1125.19,1530.04 1149.26,1541.48 1173.33,1552.36 1197.4,1562.7 1221.46,1572.54 1245.53,1581.89 1269.6,1590.78 1293.67,1599.23 1317.74,1607.26 1341.8,1614.9 1365.87,1622.16 1389.94,1629.07 1414.01,1635.63 1438.08,1641.88 1462.14,1647.81 1486.21,1653.45 1510.28,1658.82 1534.35,1663.92 1558.42,1668.77 1582.48,1673.38 1606.55,1677.76 1630.62,1681.93 1654.69,1685.89 1678.76,1689.66 1702.82,1693.24 1726.89,1696.64 1750.96,1699.88 1775.03,1702.96 1799.1,1705.88 1823.17,1708.67 1847.23,1711.31 1871.3,1713.83 1895.37,1716.22 1919.44,1718.49 1943.51,1720.65 1967.57,1722.71 1991.64,1724.66 2015.71,1726.52 2039.78,1728.28 2063.85,1729.96 2087.91,1731.56 2111.98,1733.08 2136.05,1734.52 2160.12,1735.89 2184.19,1737.2 2208.25,1738.44 2232.32,1739.61 2256.39,1740.74 2280.46,1741.8 2304.53,1742.81 2328.59,1743.78 2352.66,1744.69 2376.73,1745.56 2400.8,1746.39 2424.87,1747.18 2448.93,1747.93 2473,1748.64 2497.07,1749.32 2521.14,1749.96 2545.21,1750.57 2569.27,1751.15 \"/>\n<path clip-path=\"url(#clip150)\" d=\"M2251.57 209.375 L2556.57 209.375 L2556.57 105.695 L2251.57 105.695  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2251.57,209.375 2556.57,209.375 2556.57,105.695 2251.57,105.695 2251.57,209.375 \"/>\n<polyline clip-path=\"url(#clip150)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2279.63,157.535 2448.01,157.535 \"/>\n<path clip-path=\"url(#clip150)\" d=\"M2489.91 177.223 Q2488.11 181.852 2486.4 183.264 Q2484.68 184.676 2481.81 184.676 L2478.41 184.676 L2478.41 181.112 L2480.91 181.112 Q2482.67 181.112 2483.64 180.278 Q2484.61 179.445 2485.79 176.343 L2486.56 174.399 L2476.07 148.889 L2480.59 148.889 L2488.69 169.167 L2496.79 148.889 L2501.3 148.889 L2489.91 177.223 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip150)\" d=\"M2508.6 170.88 L2516.23 170.88 L2516.23 144.515 L2507.92 146.181 L2507.92 141.922 L2516.19 140.255 L2520.86 140.255 L2520.86 170.88 L2528.5 170.88 L2528.5 174.815 L2508.6 174.815 L2508.6 170.88 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n```\n:::\n:::\n\n\nPerfect! Perhaps a more realistic use-case is to specify dynamical conditions that kick in at some intermediate time, for example, a random kick every `n` iterations. This can be done like so:\n\n::: {#d9bb2c6a .cell execution_count=11}\n``` {.julia .cell-code}\nlet\n    record_state = Callback(\n        OnIterElapsed(1),\n        RecordObservable((u=(iter, integrator) -> copy(integrator.u),))\n    )\n\n    kick_callback = Callback(\n        OnIterElapsed(20),\n        (iter, integrator) -> integrator.u[1] += (2 * rand() - 1),\n    )\n    solve!(dfdt!, [5.0], range(0.0, 1.0, length=100), solver=RK4Integrator, (callback!)=CallbackList([record_state, kick_callback]))\n    plot(first.(record_state.effect.u))\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"672\" height=\"480\" viewBox=\"0 0 2688 1920\">\n<defs>\n  <clipPath id=\"clip240\">\n    <rect x=\"0\" y=\"0\" width=\"2688\" height=\"1920\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip240)\" d=\"M0 1920 L2688 1920 L2688 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip241\">\n    <rect x=\"537\" y=\"0\" width=\"1883\" height=\"1883\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip240)\" d=\"M115.057 1800.78 L2640.76 1800.78 L2640.76 47.2441 L115.057 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip242\">\n    <rect x=\"115\" y=\"47\" width=\"2527\" height=\"1755\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"162.471,1800.78 162.471,47.2441 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"764.172,1800.78 764.172,47.2441 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1365.87,1800.78 1365.87,47.2441 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1967.57,1800.78 1967.57,47.2441 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2569.27,1800.78 2569.27,47.2441 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"115.057,1445.75 2640.76,1445.75 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"115.057,1086.41 2640.76,1086.41 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"115.057,727.066 2640.76,727.066 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"115.057,367.724 2640.76,367.724 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"115.057,1800.78 2640.76,1800.78 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"162.471,1800.78 162.471,1781.88 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"764.172,1800.78 764.172,1781.88 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1365.87,1800.78 1365.87,1781.88 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1967.57,1800.78 1967.57,1781.88 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2569.27,1800.78 2569.27,1781.88 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M162.471 1834 Q158.86 1834 157.031 1837.57 Q155.226 1841.11 155.226 1848.24 Q155.226 1855.34 157.031 1858.91 Q158.86 1862.45 162.471 1862.45 Q166.105 1862.45 167.911 1858.91 Q169.74 1855.34 169.74 1848.24 Q169.74 1841.11 167.911 1837.57 Q166.105 1834 162.471 1834 M162.471 1830.3 Q168.281 1830.3 171.337 1834.9 Q174.416 1839.49 174.416 1848.24 Q174.416 1856.96 171.337 1861.57 Q168.281 1866.15 162.471 1866.15 Q156.661 1866.15 153.582 1861.57 Q150.527 1856.96 150.527 1848.24 Q150.527 1839.49 153.582 1834.9 Q156.661 1830.3 162.471 1830.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M743.443 1861.55 L759.762 1861.55 L759.762 1865.48 L737.818 1865.48 L737.818 1861.55 Q740.48 1858.79 745.063 1854.16 Q749.67 1849.51 750.85 1848.17 Q753.096 1845.65 753.975 1843.91 Q754.878 1842.15 754.878 1840.46 Q754.878 1837.71 752.933 1835.97 Q751.012 1834.23 747.91 1834.23 Q745.711 1834.23 743.258 1835 Q740.827 1835.76 738.049 1837.31 L738.049 1832.59 Q740.873 1831.46 743.327 1830.88 Q745.781 1830.3 747.818 1830.3 Q753.188 1830.3 756.383 1832.98 Q759.577 1835.67 759.577 1840.16 Q759.577 1842.29 758.767 1844.21 Q757.98 1846.11 755.873 1848.7 Q755.295 1849.37 752.193 1852.59 Q749.091 1855.78 743.443 1861.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M769.623 1830.92 L787.98 1830.92 L787.98 1834.86 L773.906 1834.86 L773.906 1843.33 Q774.924 1842.98 775.943 1842.82 Q776.961 1842.64 777.98 1842.64 Q783.767 1842.64 787.146 1845.81 Q790.526 1848.98 790.526 1854.4 Q790.526 1859.97 787.054 1863.08 Q783.581 1866.15 777.262 1866.15 Q775.086 1866.15 772.818 1865.78 Q770.572 1865.41 768.165 1864.67 L768.165 1859.97 Q770.248 1861.11 772.47 1861.66 Q774.693 1862.22 777.169 1862.22 Q781.174 1862.22 783.512 1860.11 Q785.85 1858.01 785.85 1854.4 Q785.85 1850.78 783.512 1848.68 Q781.174 1846.57 777.169 1846.57 Q775.294 1846.57 773.419 1846.99 Q771.568 1847.4 769.623 1848.28 L769.623 1830.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1340.57 1830.92 L1358.93 1830.92 L1358.93 1834.86 L1344.85 1834.86 L1344.85 1843.33 Q1345.87 1842.98 1346.89 1842.82 Q1347.91 1842.64 1348.93 1842.64 Q1354.72 1842.64 1358.09 1845.81 Q1361.47 1848.98 1361.47 1854.4 Q1361.47 1859.97 1358 1863.08 Q1354.53 1866.15 1348.21 1866.15 Q1346.03 1866.15 1343.77 1865.78 Q1341.52 1865.41 1339.11 1864.67 L1339.11 1859.97 Q1341.2 1861.11 1343.42 1861.66 Q1345.64 1862.22 1348.12 1862.22 Q1352.12 1862.22 1354.46 1860.11 Q1356.8 1858.01 1356.8 1854.4 Q1356.8 1850.78 1354.46 1848.68 Q1352.12 1846.57 1348.12 1846.57 Q1346.24 1846.57 1344.37 1846.99 Q1342.52 1847.4 1340.57 1848.28 L1340.57 1830.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1380.69 1834 Q1377.08 1834 1375.25 1837.57 Q1373.44 1841.11 1373.44 1848.24 Q1373.44 1855.34 1375.25 1858.91 Q1377.08 1862.45 1380.69 1862.45 Q1384.32 1862.45 1386.13 1858.91 Q1387.96 1855.34 1387.96 1848.24 Q1387.96 1841.11 1386.13 1837.57 Q1384.32 1834 1380.69 1834 M1380.69 1830.3 Q1386.5 1830.3 1389.55 1834.9 Q1392.63 1839.49 1392.63 1848.24 Q1392.63 1856.96 1389.55 1861.57 Q1386.5 1866.15 1380.69 1866.15 Q1374.88 1866.15 1371.8 1861.57 Q1368.74 1856.96 1368.74 1848.24 Q1368.74 1839.49 1371.8 1834.9 Q1374.88 1830.3 1380.69 1830.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1941.43 1830.92 L1963.65 1830.92 L1963.65 1832.91 L1951.1 1865.48 L1946.22 1865.48 L1958.02 1834.86 L1941.43 1834.86 L1941.43 1830.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1972.82 1830.92 L1991.17 1830.92 L1991.17 1834.86 L1977.1 1834.86 L1977.1 1843.33 Q1978.12 1842.98 1979.14 1842.82 Q1980.15 1842.64 1981.17 1842.64 Q1986.96 1842.64 1990.34 1845.81 Q1993.72 1848.98 1993.72 1854.4 Q1993.72 1859.97 1990.25 1863.08 Q1986.77 1866.15 1980.46 1866.15 Q1978.28 1866.15 1976.01 1865.78 Q1973.77 1865.41 1971.36 1864.67 L1971.36 1859.97 Q1973.44 1861.11 1975.66 1861.66 Q1977.89 1862.22 1980.36 1862.22 Q1984.37 1862.22 1986.71 1860.11 Q1989.04 1858.01 1989.04 1854.4 Q1989.04 1850.78 1986.71 1848.68 Q1984.37 1846.57 1980.36 1846.57 Q1978.49 1846.57 1976.61 1846.99 Q1974.76 1847.4 1972.82 1848.28 L1972.82 1830.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2528.88 1861.55 L2536.52 1861.55 L2536.52 1835.18 L2528.21 1836.85 L2528.21 1832.59 L2536.47 1830.92 L2541.15 1830.92 L2541.15 1861.55 L2548.79 1861.55 L2548.79 1865.48 L2528.88 1865.48 L2528.88 1861.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2568.23 1834 Q2564.62 1834 2562.79 1837.57 Q2560.99 1841.11 2560.99 1848.24 Q2560.99 1855.34 2562.79 1858.91 Q2564.62 1862.45 2568.23 1862.45 Q2571.87 1862.45 2573.67 1858.91 Q2575.5 1855.34 2575.5 1848.24 Q2575.5 1841.11 2573.67 1837.57 Q2571.87 1834 2568.23 1834 M2568.23 1830.3 Q2574.04 1830.3 2577.1 1834.9 Q2580.18 1839.49 2580.18 1848.24 Q2580.18 1856.96 2577.1 1861.57 Q2574.04 1866.15 2568.23 1866.15 Q2562.42 1866.15 2559.34 1861.57 Q2556.29 1856.96 2556.29 1848.24 Q2556.29 1839.49 2559.34 1834.9 Q2562.42 1830.3 2568.23 1830.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2598.39 1834 Q2594.78 1834 2592.95 1837.57 Q2591.15 1841.11 2591.15 1848.24 Q2591.15 1855.34 2592.95 1858.91 Q2594.78 1862.45 2598.39 1862.45 Q2602.03 1862.45 2603.83 1858.91 Q2605.66 1855.34 2605.66 1848.24 Q2605.66 1841.11 2603.83 1837.57 Q2602.03 1834 2598.39 1834 M2598.39 1830.3 Q2604.2 1830.3 2607.26 1834.9 Q2610.34 1839.49 2610.34 1848.24 Q2610.34 1856.96 2607.26 1861.57 Q2604.2 1866.15 2598.39 1866.15 Q2592.58 1866.15 2589.51 1861.57 Q2586.45 1856.96 2586.45 1848.24 Q2586.45 1839.49 2589.51 1834.9 Q2592.58 1830.3 2598.39 1830.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"115.057,1800.78 115.057,47.2441 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"115.057,1445.75 133.955,1445.75 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"115.057,1086.41 133.955,1086.41 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"115.057,727.066 133.955,727.066 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"115.057,367.724 133.955,367.724 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M54.8299 1459.09 L62.4687 1459.09 L62.4687 1432.73 L54.1586 1434.39 L54.1586 1430.14 L62.4224 1428.47 L67.0983 1428.47 L67.0983 1459.09 L74.7372 1459.09 L74.7372 1463.03 L54.8299 1463.03 L54.8299 1459.09 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M58.4178 1099.75 L74.7372 1099.75 L74.7372 1103.69 L52.7928 1103.69 L52.7928 1099.75 Q55.4549 1097 60.0382 1092.37 Q64.6446 1087.72 65.8252 1086.37 Q68.0705 1083.85 68.9502 1082.11 Q69.8529 1080.35 69.8529 1078.66 Q69.8529 1075.91 67.9085 1074.17 Q65.9872 1072.44 62.8854 1072.44 Q60.6863 1072.44 58.2326 1073.2 Q55.8021 1073.97 53.0243 1075.52 L53.0243 1070.79 Q55.8484 1069.66 58.3021 1069.08 Q60.7558 1068.5 62.7928 1068.5 Q68.1631 1068.5 71.3576 1071.19 Q74.552 1073.87 74.552 1078.36 Q74.552 1080.49 73.7418 1082.41 Q72.9548 1084.31 70.8483 1086.9 Q70.2696 1087.58 67.1678 1090.79 Q64.0659 1093.99 58.4178 1099.75 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M67.6076 725.712 Q70.964 726.429 72.839 728.698 Q74.7372 730.966 74.7372 734.3 Q74.7372 739.415 71.2187 742.216 Q67.7002 745.017 61.2187 745.017 Q59.0428 745.017 56.728 744.577 Q54.4364 744.161 51.9827 743.304 L51.9827 738.79 Q53.9271 739.925 56.2419 740.503 Q58.5567 741.082 61.0798 741.082 Q65.478 741.082 67.7696 739.346 Q70.0844 737.61 70.0844 734.3 Q70.0844 731.244 67.9317 729.531 Q65.802 727.795 61.9826 727.795 L57.9549 727.795 L57.9549 723.952 L62.1678 723.952 Q65.6169 723.952 67.4455 722.587 Q69.2742 721.198 69.2742 718.605 Q69.2742 715.943 67.3761 714.531 Q65.5011 713.096 61.9826 713.096 Q60.0613 713.096 57.8623 713.513 Q55.6632 713.929 53.0243 714.809 L53.0243 710.642 Q55.6864 709.902 58.0012 709.531 Q60.3391 709.161 62.3993 709.161 Q67.7233 709.161 70.8252 711.591 Q73.927 713.999 73.927 718.119 Q73.927 720.989 72.2835 722.98 Q70.64 724.948 67.6076 725.712 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M65.1539 354.518 L53.3484 372.967 L65.1539 372.967 L65.1539 354.518 M63.927 350.444 L69.8066 350.444 L69.8066 372.967 L74.7372 372.967 L74.7372 376.856 L69.8066 376.856 L69.8066 385.004 L65.1539 385.004 L65.1539 376.856 L49.5521 376.856 L49.5521 372.342 L63.927 350.444 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip242)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"186.539,96.8724 210.607,181.004 234.675,260.991 258.743,337.04 282.811,409.342 306.879,478.084 330.947,543.44 355.015,605.578 379.083,664.655 403.151,720.822 427.219,774.223 451.288,824.994 475.356,873.265 499.424,919.158 523.492,962.791 547.56,1004.27 571.628,1043.72 595.696,1081.21 619.764,1116.87 643.832,1150.76 667.9,899.947 691.968,944.526 716.036,986.91 740.104,1027.21 764.172,1065.52 788.24,1101.94 812.308,1136.57 836.376,1169.5 860.444,1200.8 884.512,1230.56 908.58,1258.86 932.648,1285.76 956.716,1311.34 980.784,1335.66 1004.85,1358.78 1028.92,1380.76 1052.99,1401.66 1077.06,1421.53 1101.12,1440.42 1125.19,1458.38 1149.26,1664.27 1173.33,1671.21 1197.4,1677.8 1221.46,1684.07 1245.53,1690.03 1269.6,1695.7 1293.67,1701.09 1317.74,1706.21 1341.8,1711.08 1365.87,1715.71 1389.94,1720.11 1414.01,1724.3 1438.08,1728.28 1462.14,1732.06 1486.21,1735.66 1510.28,1739.08 1534.35,1742.33 1558.42,1745.42 1582.48,1748.36 1606.55,1751.15 1630.62,1583.94 1654.69,1594.83 1678.76,1605.18 1702.82,1615.03 1726.89,1624.39 1750.96,1633.29 1775.03,1641.75 1799.1,1649.8 1823.17,1657.44 1847.23,1664.72 1871.3,1671.63 1895.37,1678.2 1919.44,1684.45 1943.51,1690.39 1967.57,1696.04 1991.64,1701.41 2015.71,1706.52 2039.78,1711.37 2063.85,1715.99 2087.91,1720.38 2111.98,1508.94 2136.05,1523.52 2160.12,1537.39 2184.19,1550.58 2208.25,1563.11 2232.32,1575.03 2256.39,1586.36 2280.46,1597.13 2304.53,1607.37 2328.59,1617.11 2352.66,1626.37 2376.73,1635.17 2400.8,1643.54 2424.87,1651.5 2448.93,1659.06 2473,1666.25 2497.07,1673.09 2521.14,1679.59 2545.21,1685.77 2569.27,1691.65 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M2251.57 209.375 L2556.57 209.375 L2556.57 105.695 L2251.57 105.695  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2251.57,209.375 2556.57,209.375 2556.57,105.695 2251.57,105.695 2251.57,209.375 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2279.63,157.535 2448.01,157.535 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M2489.91 177.223 Q2488.11 181.852 2486.4 183.264 Q2484.68 184.676 2481.81 184.676 L2478.41 184.676 L2478.41 181.112 L2480.91 181.112 Q2482.67 181.112 2483.64 180.278 Q2484.61 179.445 2485.79 176.343 L2486.56 174.399 L2476.07 148.889 L2480.59 148.889 L2488.69 169.167 L2496.79 148.889 L2501.3 148.889 L2489.91 177.223 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2508.6 170.88 L2516.23 170.88 L2516.23 144.515 L2507.92 146.181 L2507.92 141.922 L2516.19 140.255 L2520.86 140.255 L2520.86 170.88 L2528.5 170.88 L2528.5 174.815 L2508.6 174.815 L2508.6 170.88 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n```\n:::\n:::\n\n\nI think this is quite a nice example demonstrating how the callback pattern allows modularity and extensibility for the user with no need to poke into the internals of the core solver loop. However, it should be noted that design patterns such as this one tend to quickly ramp up in complexity and the overhead introduced both in compilation time and developer maintanence time can often outweigh its usefulness. So its important to keep your specific use-case in mind and try to use such constructions only when strictly required.\n\nBefore we conclude, it is important to note that the example presented above is a fairly specific utilization of callbacks in the context of scientific software where one may want to inject custom logic inside a core program loop. On the other hand, the concept is also widely prevalent in video game programming and web development, typically presenting itself in the context of asynchronous programming. While the key idea still remains that the invocation of a function is deferred until some other function is completed, the resulting interfaces may take up a different form than we see here. Perhaps that is a topic for another time.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}